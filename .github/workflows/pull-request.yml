name: Pull Request CI

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  api-unit-tests:
    name: API Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test "Memoraid.Tests.Unit/Memoraid.Tests.Unit.csproj" --no-build --verbosity normal

  app-unit-tests:
    name: App Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "src/app/.nvmrc"
          cache: "yarn"
          cache-dependency-path: src/app/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [api-unit-tests, app-unit-tests]
    permissions:
      contents: read
      actions: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Start application with Docker Compose
        run: |
          echo "Waiting for services to be ready..."
          docker-compose up -d --wait

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "src/app/.nvmrc"
          cache: "yarn"
          cache-dependency-path: src/app/yarn.lock

      - name: Install dependencies
        working-directory: src/app
        run: yarn install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: src/app
        run: npx playwright install chromium

      - name: Run E2E tests
        working-directory: src/app
        run: yarn e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: src/app/e2e/playwright-report
          retention-days: 7

      - name: Stop Docker containers
        if: always()
        run: docker-compose down

  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    permissions:
      pull-requests: write
      actions: read
    steps:
      - name: Generate status comment
        id: status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runId = context.runId;
            const issue_number = context.issue.number;

            // Get the workflow run info
            const run = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: runId
            });

            // Get jobs for this workflow run
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: runId
            });

            // Extract status for each job
            const jobResults = {};
            jobs.data.jobs.forEach(job => {
              jobResults[job.name] = job.conclusion || 'pending';
            });

            // Format status emojis
            function getStatusEmoji(status) {
              if (status === 'success') return '✅';
              if (status === 'skipped') return '⏭️';
              if (status === 'pending') return '⏳';
              return '❌';
            }

            // Extract statuses
            const apiTestStatus = jobResults['API Unit Tests'] || 'pending';
            const appTestStatus = jobResults['App Unit Tests'] || 'pending';
            const e2eTestStatus = jobResults['E2E Tests'] || 'pending';

            // Determine overall build status
            const buildStatus = (apiTestStatus === 'success' && appTestStatus === 'success' && e2eTestStatus === 'success') 
              ? 'success' 
              : (apiTestStatus === 'pending' || appTestStatus === 'pending' || e2eTestStatus === 'pending')
                ? 'pending'
                : 'failure';
                
            // Prepare comment body
            const body = `## Pull Request Build Status

            | Job | Status |
            | --- | ------ |
            | API unit tests | ${getStatusEmoji(apiTestStatus)} ${apiTestStatus.toUpperCase()} |
            | App unit tests | ${getStatusEmoji(appTestStatus)} ${appTestStatus.toUpperCase()} |
            | E2E tests | ${getStatusEmoji(e2eTestStatus)} ${e2eTestStatus.toUpperCase()} |

            ${buildStatus === 'success' ? '🎉 All checks passed!' : '⚠️ Some checks are pending or failed. Please review the build logs for details.'}
            `;

            // Post comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });
